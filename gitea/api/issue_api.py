"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.14.6
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gitea.api_client import ApiClient, Endpoint as _Endpoint
from gitea.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gitea.model.add_time_option import AddTimeOption
from gitea.model.comment import Comment
from gitea.model.create_issue_comment_option import CreateIssueCommentOption
from gitea.model.create_issue_option import CreateIssueOption
from gitea.model.create_label_option import CreateLabelOption
from gitea.model.create_milestone_option import CreateMilestoneOption
from gitea.model.edit_deadline_option import EditDeadlineOption
from gitea.model.edit_issue_comment_option import EditIssueCommentOption
from gitea.model.edit_issue_option import EditIssueOption
from gitea.model.edit_label_option import EditLabelOption
from gitea.model.edit_milestone_option import EditMilestoneOption
from gitea.model.edit_reaction_option import EditReactionOption
from gitea.model.issue import Issue
from gitea.model.issue_deadline import IssueDeadline
from gitea.model.issue_labels_option import IssueLabelsOption
from gitea.model.label import Label
from gitea.model.milestone import Milestone
from gitea.model.reaction import Reaction
from gitea.model.tracked_time import TrackedTime
from gitea.model.user import User
from gitea.model.watch_info import WatchInfo


class IssueApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.issue_add_label_endpoint = _Endpoint(
            settings={
                'response_type': ([Label],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/labels',
                'operation_id': 'issue_add_label',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (IssueLabelsOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_add_subscription_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
                'operation_id': 'issue_add_subscription',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'user',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'user': 'user',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'user': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_add_time_endpoint = _Endpoint(
            settings={
                'response_type': (TrackedTime,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/times',
                'operation_id': 'issue_add_time',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (AddTimeOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_check_subscription_endpoint = _Endpoint(
            settings={
                'response_type': (WatchInfo,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/subscriptions/check',
                'operation_id': 'issue_check_subscription',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_clear_labels_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/labels',
                'operation_id': 'issue_clear_labels',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_create_comment_endpoint = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/comments',
                'operation_id': 'issue_create_comment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (CreateIssueCommentOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_create_issue_endpoint = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues',
                'operation_id': 'issue_create_issue',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateIssueOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_create_label_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/labels',
                'operation_id': 'issue_create_label',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateLabelOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_create_milestone_endpoint = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/milestones',
                'operation_id': 'issue_create_milestone',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'body':
                        (CreateMilestoneOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_delete_comment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}',
                'operation_id': 'issue_delete_comment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_comment_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
                'operation_id': 'issue_delete_comment_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_comment_reaction_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
                'operation_id': 'issue_delete_comment_reaction',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'content',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'content':
                        (EditReactionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'content': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_delete_issue_reaction_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/reactions',
                'operation_id': 'issue_delete_issue_reaction',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'content',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'content':
                        (EditReactionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'content': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_delete_label_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/labels/{id}',
                'operation_id': 'issue_delete_label',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_milestone_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/milestones/{id}',
                'operation_id': 'issue_delete_milestone',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_stop_watch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete',
                'operation_id': 'issue_delete_stop_watch',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_subscription_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
                'operation_id': 'issue_delete_subscription',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'user',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'user': 'user',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'user': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_delete_time_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/times/{id}',
                'operation_id': 'issue_delete_time',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_edit_comment_endpoint = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}',
                'operation_id': 'issue_edit_comment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'body':
                        (EditIssueCommentOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_edit_comment_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
                'operation_id': 'issue_edit_comment_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                    'body':
                        (EditIssueCommentOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_edit_issue_endpoint = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}',
                'operation_id': 'issue_edit_issue',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (EditIssueOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_edit_issue_deadline_endpoint = _Endpoint(
            settings={
                'response_type': (IssueDeadline,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/deadline',
                'operation_id': 'issue_edit_issue_deadline',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (EditDeadlineOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_edit_label_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/labels/{id}',
                'operation_id': 'issue_edit_label',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'body':
                        (EditLabelOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_edit_milestone_endpoint = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/milestones/{id}',
                'operation_id': 'issue_edit_milestone',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                    'body':
                        (EditMilestoneOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_get_comment_endpoint = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}',
                'operation_id': 'issue_get_comment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_comment_reactions_endpoint = _Endpoint(
            settings={
                'response_type': ([Reaction],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
                'operation_id': 'issue_get_comment_reactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_comments_endpoint = _Endpoint(
            settings={
                'response_type': ([Comment],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/comments',
                'operation_id': 'issue_get_comments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'since',
                    'before',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'since': 'since',
                    'before': 'before',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'since': 'query',
                    'before': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_issue_endpoint = _Endpoint(
            settings={
                'response_type': (Issue,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}',
                'operation_id': 'issue_get_issue',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_issue_reactions_endpoint = _Endpoint(
            settings={
                'response_type': ([Reaction],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/reactions',
                'operation_id': 'issue_get_issue_reactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_label_endpoint = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/labels/{id}',
                'operation_id': 'issue_get_label',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_labels_endpoint = _Endpoint(
            settings={
                'response_type': ([Label],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/labels',
                'operation_id': 'issue_get_labels',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_milestone_endpoint = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/milestones/{id}',
                'operation_id': 'issue_get_milestone',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_milestones_list_endpoint = _Endpoint(
            settings={
                'response_type': ([Milestone],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/milestones',
                'operation_id': 'issue_get_milestones_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'state',
                    'name',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'state':
                        (str,),
                    'name':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'state': 'state',
                    'name': 'name',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'state': 'query',
                    'name': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_get_repo_comments_endpoint = _Endpoint(
            settings={
                'response_type': ([Comment],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments',
                'operation_id': 'issue_get_repo_comments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'since',
                    'before',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'since': 'since',
                    'before': 'before',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'since': 'query',
                    'before': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_list_issues_endpoint = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues',
                'operation_id': 'issue_list_issues',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'state',
                    'labels',
                    'q',
                    'type',
                    'milestones',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                    'state',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('state',): {

                        "CLOSED": "closed",
                        "OPEN": "open",
                        "ALL": "all"
                    },
                    ('type',): {

                        "ISSUES": "issues",
                        "PULLS": "pulls"
                    },
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'state':
                        (str,),
                    'labels':
                        (str,),
                    'q':
                        (str,),
                    'type':
                        (str,),
                    'milestones':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'state': 'state',
                    'labels': 'labels',
                    'q': 'q',
                    'type': 'type',
                    'milestones': 'milestones',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'state': 'query',
                    'labels': 'query',
                    'q': 'query',
                    'type': 'query',
                    'milestones': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_list_labels_endpoint = _Endpoint(
            settings={
                'response_type': ([Label],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/labels',
                'operation_id': 'issue_list_labels',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_post_comment_reaction_endpoint = _Endpoint(
            settings={
                'response_type': (Reaction,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
                'operation_id': 'issue_post_comment_reaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'id',
                    'content',
                ],
                'required': [
                    'owner',
                    'repo',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'id':
                        (int,),
                    'content':
                        (EditReactionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'id': 'path',
                    'content': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_post_issue_reaction_endpoint = _Endpoint(
            settings={
                'response_type': (Reaction,),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/reactions',
                'operation_id': 'issue_post_issue_reaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'content',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'content':
                        (EditReactionOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'content': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_remove_label_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/labels/{id}',
                'operation_id': 'issue_remove_label',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'id': 'id',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_replace_labels_endpoint = _Endpoint(
            settings={
                'response_type': ([Label],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/labels',
                'operation_id': 'issue_replace_labels',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'body',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'body':
                        (IssueLabelsOption,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.issue_reset_time_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/times',
                'operation_id': 'issue_reset_time',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_search_issues_endpoint = _Endpoint(
            settings={
                'response_type': ([Issue],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/issues/search',
                'operation_id': 'issue_search_issues',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'state',
                    'labels',
                    'q',
                    'priority_repo_id',
                    'type',
                    'since',
                    'before',
                    'assigned',
                    'created',
                    'mentioned',
                    'review_requested',
                    'page',
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'state':
                        (str,),
                    'labels':
                        (str,),
                    'q':
                        (str,),
                    'priority_repo_id':
                        (int,),
                    'type':
                        (str,),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'assigned':
                        (bool,),
                    'created':
                        (bool,),
                    'mentioned':
                        (bool,),
                    'review_requested':
                        (bool,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'state': 'state',
                    'labels': 'labels',
                    'q': 'q',
                    'priority_repo_id': 'priority_repo_id',
                    'type': 'type',
                    'since': 'since',
                    'before': 'before',
                    'assigned': 'assigned',
                    'created': 'created',
                    'mentioned': 'mentioned',
                    'review_requested': 'review_requested',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'state': 'query',
                    'labels': 'query',
                    'q': 'query',
                    'priority_repo_id': 'query',
                    'type': 'query',
                    'since': 'query',
                    'before': 'query',
                    'assigned': 'query',
                    'created': 'query',
                    'mentioned': 'query',
                    'review_requested': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_start_stop_watch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/stopwatch/start',
                'operation_id': 'issue_start_stop_watch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_stop_stop_watch_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop',
                'operation_id': 'issue_stop_stop_watch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_subscriptions_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/subscriptions',
                'operation_id': 'issue_subscriptions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_tracked_times_endpoint = _Endpoint(
            settings={
                'response_type': ([TrackedTime],),
                'auth': [
                    'AccessToken',
                    'AuthorizationHeaderToken',
                    'BasicAuth',
                    'SudoHeader',
                    'SudoParam',
                    'TOTPHeader',
                    'Token'
                ],
                'endpoint_path': '/repos/{owner}/{repo}/issues/{index}/times',
                'operation_id': 'issue_tracked_times',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'owner',
                    'repo',
                    'index',
                    'user',
                    'since',
                    'before',
                    'page',
                    'limit',
                ],
                'required': [
                    'owner',
                    'repo',
                    'index',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'owner':
                        (str,),
                    'repo':
                        (str,),
                    'index':
                        (int,),
                    'user':
                        (str,),
                    'since':
                        (datetime,),
                    'before':
                        (datetime,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'owner': 'owner',
                    'repo': 'repo',
                    'index': 'index',
                    'user': 'user',
                    'since': 'since',
                    'before': 'before',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'owner': 'path',
                    'repo': 'path',
                    'index': 'path',
                    'user': 'query',
                    'since': 'query',
                    'before': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def issue_add_label(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Add a label to an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_add_label(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            body (IssueLabelsOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Label]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_add_label_endpoint.call_with_http_info(**kwargs)

    def issue_add_subscription(
        self,
        owner,
        repo,
        index,
        user,
        **kwargs
    ):
        """Subscribe user to issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_add_subscription(owner, repo, index, user, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue
            user (str): user to subscribe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['user'] = \
            user
        return self.issue_add_subscription_endpoint.call_with_http_info(**kwargs)

    def issue_add_time(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Add tracked time to a issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_add_time(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            body (AddTimeOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TrackedTime
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_add_time_endpoint.call_with_http_info(**kwargs)

    def issue_check_subscription(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Check if user is subscribed to an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_check_subscription(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_check_subscription_endpoint.call_with_http_info(**kwargs)

    def issue_clear_labels(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Remove all labels from an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_clear_labels(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_clear_labels_endpoint.call_with_http_info(**kwargs)

    def issue_create_comment(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Add a comment to an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_create_comment(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            body (CreateIssueCommentOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Comment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_create_comment_endpoint.call_with_http_info(**kwargs)

    def issue_create_issue(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create an issue. If using deadline only the date will be taken into account, and time of day ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_create_issue(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateIssueOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Issue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_create_issue_endpoint.call_with_http_info(**kwargs)

    def issue_create_label(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_create_label(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateLabelOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_create_label_endpoint.call_with_http_info(**kwargs)

    def issue_create_milestone(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Create a milestone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_create_milestone(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            body (CreateMilestoneOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Milestone
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_create_milestone_endpoint.call_with_http_info(**kwargs)

    def issue_delete_comment(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_comment(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of comment to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_delete_comment_endpoint.call_with_http_info(**kwargs)

    def issue_delete_comment_deprecated(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Delete a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_comment_deprecated(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): this parameter is ignored
            id (int): id of comment to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.issue_delete_comment_deprecated_endpoint.call_with_http_info(**kwargs)

    def issue_delete_comment_reaction(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Remove a reaction from a comment of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_comment_reaction(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the comment to edit

        Keyword Args:
            content (EditReactionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_delete_comment_reaction_endpoint.call_with_http_info(**kwargs)

    def issue_delete_issue_reaction(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Remove a reaction from an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_issue_reaction(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            content (EditReactionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_delete_issue_reaction_endpoint.call_with_http_info(**kwargs)

    def issue_delete_label(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_label(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the label to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_delete_label_endpoint.call_with_http_info(**kwargs)

    def issue_delete_milestone(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Delete a milestone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_milestone(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): the milestone to delete, identified by ID and if not available by name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_delete_milestone_endpoint.call_with_http_info(**kwargs)

    def issue_delete_stop_watch(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Delete an issue's existing stopwatch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_stop_watch(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to stop the stopwatch on

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_delete_stop_watch_endpoint.call_with_http_info(**kwargs)

    def issue_delete_subscription(
        self,
        owner,
        repo,
        index,
        user,
        **kwargs
    ):
        """Unsubscribe user from issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_subscription(owner, repo, index, user, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue
            user (str): user witch unsubscribe

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['user'] = \
            user
        return self.issue_delete_subscription_endpoint.call_with_http_info(**kwargs)

    def issue_delete_time(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Delete specific tracked time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_delete_time(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue
            id (int): id of time to delete

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.issue_delete_time_endpoint.call_with_http_info(**kwargs)

    def issue_edit_comment(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Edit a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_comment(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the comment to edit

        Keyword Args:
            body (EditIssueCommentOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Comment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_edit_comment_endpoint.call_with_http_info(**kwargs)

    def issue_edit_comment_deprecated(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Edit a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_comment_deprecated(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): this parameter is ignored
            id (int): id of the comment to edit

        Keyword Args:
            body (EditIssueCommentOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Comment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.issue_edit_comment_deprecated_endpoint.call_with_http_info(**kwargs)

    def issue_edit_issue(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_issue(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to edit

        Keyword Args:
            body (EditIssueOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Issue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_edit_issue_endpoint.call_with_http_info(**kwargs)

    def issue_edit_issue_deadline(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_issue_deadline(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to create or update a deadline on

        Keyword Args:
            body (EditDeadlineOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IssueDeadline
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_edit_issue_deadline_endpoint.call_with_http_info(**kwargs)

    def issue_edit_label(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Update a label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_label(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the label to edit

        Keyword Args:
            body (EditLabelOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_edit_label_endpoint.call_with_http_info(**kwargs)

    def issue_edit_milestone(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Update a milestone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_edit_milestone(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): the milestone to edit, identified by ID and if not available by name

        Keyword Args:
            body (EditMilestoneOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Milestone
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_edit_milestone_endpoint.call_with_http_info(**kwargs)

    def issue_get_comment(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a comment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_comment(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the comment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Comment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_get_comment_endpoint.call_with_http_info(**kwargs)

    def issue_get_comment_reactions(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a list of reactions from a comment of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_comment_reactions(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the comment to edit

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Reaction]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_get_comment_reactions_endpoint.call_with_http_info(**kwargs)

    def issue_get_comments(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """List all comments on an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_comments(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            since (datetime): if provided, only comments updated since the specified time are returned.. [optional]
            before (datetime): if provided, only comments updated before the provided time are returned.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Comment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_get_comments_endpoint.call_with_http_info(**kwargs)

    def issue_get_issue(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_issue(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Issue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_get_issue_endpoint.call_with_http_info(**kwargs)

    def issue_get_issue_reactions(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get a list reactions of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_issue_reactions(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Reaction]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_get_issue_reactions_endpoint.call_with_http_info(**kwargs)

    def issue_get_label(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a single label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_label(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the label to get

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Label
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_get_label_endpoint.call_with_http_info(**kwargs)

    def issue_get_labels(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get an issue's labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_labels(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Label]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_get_labels_endpoint.call_with_http_info(**kwargs)

    def issue_get_milestone(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Get a milestone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_milestone(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (str): the milestone to get, identified by ID and if not available by name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Milestone
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_get_milestone_endpoint.call_with_http_info(**kwargs)

    def issue_get_milestones_list(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get all of a repository's opened milestones  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_milestones_list(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            state (str): Milestone state, Recognised values are open, closed and all. Defaults to \"open\". [optional]
            name (str): filter by milestone name. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Milestone]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_get_milestones_list_endpoint.call_with_http_info(**kwargs)

    def issue_get_repo_comments(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List all comments in a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_get_repo_comments(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            since (datetime): if provided, only comments updated since the provided time are returned.. [optional]
            before (datetime): if provided, only comments updated before the provided time are returned.. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Comment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_get_repo_comments_endpoint.call_with_http_info(**kwargs)

    def issue_list_issues(
        self,
        owner,
        repo,
        **kwargs
    ):
        """List a repository's issues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_list_issues(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            state (str): whether issue is open or closed. [optional]
            labels (str): comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded. [optional]
            q (str): search string. [optional]
            type (str): filter by type (issues / pulls) if set. [optional]
            milestones (str): comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Issue]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_list_issues_endpoint.call_with_http_info(**kwargs)

    def issue_list_labels(
        self,
        owner,
        repo,
        **kwargs
    ):
        """Get all of a repository's labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_list_labels(owner, repo, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Label]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        return self.issue_list_labels_endpoint.call_with_http_info(**kwargs)

    def issue_post_comment_reaction(
        self,
        owner,
        repo,
        id,
        **kwargs
    ):
        """Add a reaction to a comment of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_post_comment_reaction(owner, repo, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            id (int): id of the comment to edit

        Keyword Args:
            content (EditReactionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Reaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['id'] = \
            id
        return self.issue_post_comment_reaction_endpoint.call_with_http_info(**kwargs)

    def issue_post_issue_reaction(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Add a reaction to an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_post_issue_reaction(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            content (EditReactionOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Reaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_post_issue_reaction_endpoint.call_with_http_info(**kwargs)

    def issue_remove_label(
        self,
        owner,
        repo,
        index,
        id,
        **kwargs
    ):
        """Remove a label from an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_remove_label(owner, repo, index, id, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue
            id (int): id of the label to remove

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        kwargs['id'] = \
            id
        return self.issue_remove_label_endpoint.call_with_http_info(**kwargs)

    def issue_replace_labels(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Replace an issue's labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_replace_labels(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            body (IssueLabelsOption): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Label]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_replace_labels_endpoint.call_with_http_info(**kwargs)

    def issue_reset_time(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Reset a tracked time of an issue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_reset_time(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to add tracked time to

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_reset_time_endpoint.call_with_http_info(**kwargs)

    def issue_search_issues(
        self,
        **kwargs
    ):
        """Search for issues across the repositories that the user has access to  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_search_issues(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            state (str): whether issue is open or closed. [optional]
            labels (str): comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded. [optional]
            q (str): search string. [optional]
            priority_repo_id (int): repository to prioritize in the results. [optional]
            type (str): filter by type (issues / pulls) if set. [optional]
            since (datetime): Only show notifications updated after the given time. This is a timestamp in RFC 3339 format. [optional]
            before (datetime): Only show notifications updated before the given time. This is a timestamp in RFC 3339 format. [optional]
            assigned (bool): filter (issues / pulls) assigned to you, default is false. [optional]
            created (bool): filter (issues / pulls) created by you, default is false. [optional]
            mentioned (bool): filter (issues / pulls) mentioning you, default is false. [optional]
            review_requested (bool): filter pulls requesting your review, default is false. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Issue]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.issue_search_issues_endpoint.call_with_http_info(**kwargs)

    def issue_start_stop_watch(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Start stopwatch on an issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_start_stop_watch(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to create the stopwatch on

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_start_stop_watch_endpoint.call_with_http_info(**kwargs)

    def issue_stop_stop_watch(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Stop an issue's existing stopwatch.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_stop_stop_watch(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue to stop the stopwatch on

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_stop_stop_watch_endpoint.call_with_http_info(**kwargs)

    def issue_subscriptions(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """Get users who subscribed on an issue.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_subscriptions(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_subscriptions_endpoint.call_with_http_info(**kwargs)

    def issue_tracked_times(
        self,
        owner,
        repo,
        index,
        **kwargs
    ):
        """List an issue's tracked times  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_tracked_times(owner, repo, index, async_req=True)
        >>> result = thread.get()

        Args:
            owner (str): owner of the repo
            repo (str): name of the repo
            index (int): index of the issue

        Keyword Args:
            user (str): optional filter by user (available for issue managers). [optional]
            since (datetime): Only show times updated after the given time. This is a timestamp in RFC 3339 format. [optional]
            before (datetime): Only show times updated before the given time. This is a timestamp in RFC 3339 format. [optional]
            page (int): page number of results to return (1-based). [optional]
            limit (int): page size of results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TrackedTime]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['owner'] = \
            owner
        kwargs['repo'] = \
            repo
        kwargs['index'] = \
            index
        return self.issue_tracked_times_endpoint.call_with_http_info(**kwargs)

